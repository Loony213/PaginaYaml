name: Deploy to AWS EC2

on:
  push:
    branches:
      - main # Ejecuta el workflow cuando se haga un push a la rama main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout del repositorio
      - name: Checkout repository
        uses: actions/checkout@v3

      # Configuración de AWS CLI
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Lanza la instancia EC2 y despliega el código
      - name: Deploy EC2 instance
        run: |
          # Variables
          AMI_ID="ami-0c02fb55956c7d316" # Amazon Linux 2 en us-east-1
          INSTANCE_TYPE="t2.micro"
          KEY_NAME="TuNombreDeClave" # Reemplaza con tu clave SSH
          SECURITY_GROUP="MyWebServerSG"
          
          # Crear un grupo de seguridad
          SG_ID=$(aws ec2 create-security-group --group-name $SECURITY_GROUP --description "Security group for web server" --query 'GroupId' --output text)
          aws ec2 authorize-security-group-ingress --group-id $SG_ID --protocol tcp --port 22 --cidr 0.0.0.0/0
          aws ec2 authorize-security-group-ingress --group-id $SG_ID --protocol tcp --port 80 --cidr 0.0.0.0/0

          # Lanza la instancia EC2
          INSTANCE_ID=$(aws ec2 run-instances --image-id $AMI_ID --count 1 --instance-type $INSTANCE_TYPE --key-name $KEY_NAME --security-group-ids $SG_ID --query 'Instances[0].InstanceId' --output text)

          # Espera a que la instancia esté lista
          aws ec2 wait instance-running --instance-ids $INSTANCE_ID

          # Obtén la IP pública de la instancia
          PUBLIC_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)

          # Instala Git, Apache y clona el repositorio en la instancia
          aws ec2-instance-connect send-ssh-public-key --instance-id $INSTANCE_ID --availability-zone $(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query 'Reservations[0].Instances[0].Placement.AvailabilityZone' --output text) --instance-os-user ec2-user --ssh-public-key file://~/.ssh/id_rsa.pub
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ec2-user@$PUBLIC_IP << EOF
            sudo yum update -y
            sudo yum install -y git httpd
            sudo systemctl start httpd
            sudo systemctl enable httpd
            cd /var/www/html
            git clone https://github.com/${{ github.repository }} .
          EOF

          echo "Application deployed at http://$PUBLIC_IP"
